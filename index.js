const express = require("express");
const app = express();
const cors = require("cors");
const helmet = require("helmet");
const nodemailer = require("nodemailer");
const path = require("path");
const mongoose = require("mongoose");
const { htmlTemplate } = require("./config");
require("dotenv").config();
app.use(cors());
app.use(helmet());
app.use(express.static("client/build"));
app.use(express.json());

const { Queries } = require("./Schemas/Queries");
const { PORT, MONGOSTR } = process.env;

app.post("/sendmail", async (req, res) => {
  const name = req?.body?.name;
  const email = req?.body?.email;
  const message = req?.body?.message;
  console.log(req.body);
  if (!name || !email || !message || message?.length <= 0) {
    return res
      .status(404)
      .json({ message: "Email/name/Message are missing!", success: false });
  }

  const { SERVICE, USER, PASS } = process.env;
  try {
    const newQuery = new Queries({ name, email, message });
    await newQuery.save();
    const transporter = nodemailer.createTransport({
      service: SERVICE,
      auth: {
        user: USER,
        pass: PASS,
      },
    });

    const mailOptions = {
      from: USER,
      to: email,
      subject: "Autogenerated Response",
      html: htmlTemplate(name),
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        return res
          .status(500)
          .json({ message: "Internal Server Error", success: false });
      } else {
        return res
          .status(200)
          .json({ message: "Email sent: " + info.response, success: true });
      }
    });
  } catch (e) {
    return res
      .status(500)
      .json({ message: "Internal Server Error", success: false });
  }
});

app.get("*", (req, res) => {
  res.sendFile(path.resolve(__dirname, "client", "build", "index.html"));
});

app.all("*", (req, res) => {
  res.status(404).send("<h1>404! Page not found</h1>");
});

const start = async () => {
  await mongoose.connect(MONGOSTR).then(
    () => console.log("connected to db"),
    (err) => console.error(err)
  );
  app.listen(PORT, () => {
    console.log(`Example app listening on port ${PORT}`);
  });
};

start();
